openapi: 3.0.1
info:
  title: Text-To-Speech ENG
  description: |
    "This Voice microservice converts English text into speech in a female voice.

    The Text-to-Speech AI generated synthesized voice speaks with Singapore English accent.
    
    Do ensure that your text is within **2000 characters**.
  x-additionalinfo: |+
    Suggested Use Cases:
    - Transcribes spoken English words, sentences or phrases into written forms

    - Voice bots in contact centers - deliver a better voice experience for customer service by dynamically generating speech, instead of playing static, pre-recorded audio. Engage with synthesized voices that give callers a sense of familiarity and personalization.

    - Voice generation in devices - enable natural communications with users by empowering your devices to speak humanlike voices. Build an end-to-end voice user interface together with Speech-to-Text and improve user experience with easy and engaging interactions.

    - Accessible EPGs (Electronic Program Guides) - implement text-to-speech functionality in EPGs to provide a better user experience to customers and meet accessibility requirements for services and applications.
  version: '0.1.0'
  x-subscribelink: text-to-speech_eng
  x-apitype: small file
  x-apitypedescription: |+
    Fast | Single-Call | 3000 characters/Call
  x-inputfilelimit: |+
    Process up to 3000 characters of data per API call.
  x-responsetime: |+
    Response rate is fast due to small data transfer per call made.
  x-billingmethod: |+
    The API is billed by per request.
  x-notes: |+
    Limit cannot exceed 3000 characters.
  x-apidetailsdesc: |+
    Converts English text to speech in a female voice.
servers:
  - url: 'https://apis.sentient.io'
tags:
  - name: v0.1.0
    description: 'Published Date - Sep 28, 2018'
paths:
  /microservices/voice/ttseng/v0.1/getpredictions:
    post:
      tags:
        - v0.1.0
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                audioContent: UklGRiQAAABXQVZFZm10IBAAAAABAAEAgD4AAAB9AAACABAAZGF0YQAAAAA=
                message: Successfully Processed
                status: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/input'
        required: true
      x-codeSamples:
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("apis.sentient.io")

            payload = "{\"text\":\"Testing microservice\"}"

            headers = {
                'content-type': "application/json",
                'x-api-key': "REPLACE_KEY_VALUE"
                }

            conn.request("POST", "/microservices/voice/ttseng/v0.1/getpredictions", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Csharp + Restsharp
          source: |-
            var client = new RestClient("https://apis.sentient.io/microservices/voice/ttseng/v0.1/getpredictions");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/json");
            request.AddHeader("x-api-key", "REPLACE_KEY_VALUE");
            request.AddParameter("application/json", "{\"text\":\"Testing microservice\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.sentient.io/microservices/voice/ttseng/v0.1/getpredictions\"\n\n\tpayload := strings.NewReader(\"{\\\"text\\\":\\\"Testing microservice\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-api-key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://apis.sentient.io/microservices/voice/ttseng/v0.1/getpredictions")
              .header("content-type", "application/json")
              .header("x-api-key", "REPLACE_KEY_VALUE")
              .body("{\"text\":\"Testing microservice\"}")
              .asString();
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "apis.sentient.io",
              "port": null,
              "path": "/microservices/voice/ttseng/v0.1/getpredictions",
              "headers": {
                "content-type": "application/json",
                "x-api-key": "REPLACE_KEY_VALUE"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({text: 'Testing microservice'}));
            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://apis.sentient.io/microservices/voice/ttseng/v0.1/getpredictions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"text\":\"Testing microservice\"}",
              CURLOPT_HTTPHEADER => [
                "content-type: application/json",
                "x-api-key: REPLACE_KEY_VALUE"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Ruby + Native
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://apis.sentient.io/microservices/voice/ttseng/v0.1/getpredictions")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request["content-type"] = 'application/json'
            request["x-api-key"] = 'REPLACE_KEY_VALUE'
            request.body = "{\"text\":\"Testing microservice\"}"

            response = http.request(request)
            puts response.read_body
components:
  schemas:
    success:
      type: object
      properties:
        message:
          type: string
          example: Successfully Processed
          description: Detail description on the api status
        status:
          type: string
          example: Success
          description: The status of the API call success/failure
        audioContent:
          type: string
          example: UklGRiQAAABXQVZFZm10IBAAAAABAAEAgD4AAAB9AAACABAAZGF0YQAAAAA=
          description: Audio file converted to base64 encoded string.
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure
    versions:
      type: object
      properties:
        v1.0.0:
          type: array
          items:
            oneOf:
              - type: string
                example: 'Published Date - June 7,2021'
                x-details: New model release - female_singaporean
                description: Latest Version
        v0.1.0:
          type: array
          items:
            oneOf:
              - type: string
                example: 'Published Date - Sep 28,2018'
                x-details: Initial version release         
                description: Archived
    input:
      type: object
      required:
        - text
      properties:
        text:
          x-name: text
          type: string
          default: true
          example: Testing microservice
          description: |
            Input text
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header
